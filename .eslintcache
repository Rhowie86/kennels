[{"/Users/ronhowie/workspace/kennels/src/index.js":"1","/Users/ronhowie/workspace/kennels/src/reportWebVitals.js":"2","/Users/ronhowie/workspace/kennels/src/components/Kennel.js":"3","/Users/ronhowie/workspace/kennels/src/components/animal/AnimalCard.js":"4","/Users/ronhowie/workspace/kennels/src/components/location/LocationCard.js":"5","/Users/ronhowie/workspace/kennels/src/components/employee/EmployeeCard.js":"6","/Users/ronhowie/workspace/kennels/src/components/customer/CustomerCard.js":"7","/Users/ronhowie/workspace/kennels/src/components/ApplicationViews.js":"8","/Users/ronhowie/workspace/kennels/src/components/nav/NavBar.js":"9","/Users/ronhowie/workspace/kennels/src/components/Home.js":"10","/Users/ronhowie/workspace/kennels/src/components/PropsAndState.js":"11","/Users/ronhowie/workspace/kennels/src/components/animal/AnimalList.js":"12","/Users/ronhowie/workspace/kennels/src/components/animal/AnimalProvider.js":"13","/Users/ronhowie/workspace/kennels/src/components/customer/CustomerList.js":"14","/Users/ronhowie/workspace/kennels/src/components/customer/CustomerProvider.js":"15","/Users/ronhowie/workspace/kennels/src/components/employee/EmployeeProvider.js":"16","/Users/ronhowie/workspace/kennels/src/components/employee/EmployeeList.js":"17","/Users/ronhowie/workspace/kennels/src/components/location/LocationProvider.js":"18","/Users/ronhowie/workspace/kennels/src/components/location/LocationList.js":"19","/Users/ronhowie/workspace/kennels/src/components/animal/AnimalForm.js":"20","/Users/ronhowie/workspace/kennels/src/components/employee/EmployeeForm.js":"21","/Users/ronhowie/workspace/kennels/src/components/location/LocationForm.js":"22","/Users/ronhowie/workspace/kennels/src/components/animal/AnimalDetail.js":"23","/Users/ronhowie/workspace/kennels/src/components/employee/EmployeeDetail.js":"24","/Users/ronhowie/workspace/kennels/src/components/location/LocationDetail.js":"25"},{"size":348,"mtime":1611245919028,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":1611170559967,"results":"28","hashOfConfig":"27"},{"size":235,"mtime":1611245502007,"results":"29","hashOfConfig":"27"},{"size":394,"mtime":1611674349131,"results":"30","hashOfConfig":"27"},{"size":599,"mtime":1611683236483,"results":"31","hashOfConfig":"27"},{"size":362,"mtime":1611683141052,"results":"32","hashOfConfig":"27"},{"size":276,"mtime":1611339754252,"results":"33","hashOfConfig":"27"},{"size":2840,"mtime":1611683326078,"results":"34","hashOfConfig":"27"},{"size":886,"mtime":1611244069995,"results":"35","hashOfConfig":"27"},{"size":395,"mtime":1611246164720,"results":"36","hashOfConfig":"27"},{"size":493,"mtime":1611246316888,"results":"37","hashOfConfig":"27"},{"size":1333,"mtime":1611676398833,"results":"38","hashOfConfig":"27"},{"size":1339,"mtime":1611676758745,"results":"39","hashOfConfig":"27"},{"size":748,"mtime":1611335584445,"results":"40","hashOfConfig":"27"},{"size":989,"mtime":1611339955794,"results":"41","hashOfConfig":"27"},{"size":1168,"mtime":1611690084961,"results":"42","hashOfConfig":"27"},{"size":1154,"mtime":1611681116659,"results":"43","hashOfConfig":"27"},{"size":1214,"mtime":1611682892519,"results":"44","hashOfConfig":"27"},{"size":983,"mtime":1611603274211,"results":"45","hashOfConfig":"27"},{"size":5157,"mtime":1611594033203,"results":"46","hashOfConfig":"27"},{"size":3953,"mtime":1611597999724,"results":"47","hashOfConfig":"27"},{"size":3559,"mtime":1611603197717,"results":"48","hashOfConfig":"27"},{"size":889,"mtime":1611678724363,"results":"49","hashOfConfig":"27"},{"size":773,"mtime":1611681466710,"results":"50","hashOfConfig":"27"},{"size":1676,"mtime":1611695660550,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1trd211",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"54"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"54"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/ronhowie/workspace/kennels/src/index.js",[],["112","113"],"/Users/ronhowie/workspace/kennels/src/reportWebVitals.js",[],"/Users/ronhowie/workspace/kennels/src/components/Kennel.js",[],"/Users/ronhowie/workspace/kennels/src/components/animal/AnimalCard.js",[],"/Users/ronhowie/workspace/kennels/src/components/location/LocationCard.js",[],"/Users/ronhowie/workspace/kennels/src/components/employee/EmployeeCard.js",[],"/Users/ronhowie/workspace/kennels/src/components/customer/CustomerCard.js",[],"/Users/ronhowie/workspace/kennels/src/components/ApplicationViews.js",[],"/Users/ronhowie/workspace/kennels/src/components/nav/NavBar.js",[],"/Users/ronhowie/workspace/kennels/src/components/Home.js",[],"/Users/ronhowie/workspace/kennels/src/components/PropsAndState.js",[],"/Users/ronhowie/workspace/kennels/src/components/animal/AnimalList.js",["114","115","116"],"import React, { useContext, useEffect } from \"react\"\nimport { useHistory } from 'react-router-dom';\nimport { AnimalContext } from \"./AnimalProvider\"\nimport { LocationContext } from \"../location/LocationProvider\"\nimport { CustomerContext } from \"../customer/CustomerProvider\"\nimport { AnimalCard } from \"./AnimalCard\"\nimport \"./Animal.css\"\n\n\nexport const AnimalList = () => {\n  // This state changes when `getAnimals()` is invoked below\n  const { animals, getAnimals } = useContext(AnimalContext)\n  const { locations, getLocations} = useContext(LocationContext)\n  const { customers, getCustomers } = useContext(CustomerContext)\n\n  //useEffect - reach out to the world for something\n  useEffect(() => {\n    console.log(\"AnimalList: useEffect - getAnimals\")\n    getLocations()\n    .then(getCustomers)\n    .then(getAnimals)\n\n  }, [])\n\n\n\n\n  const history = useHistory()\n\n  return (\n      <>\n            <h2>Animals</h2>\n                <button onClick={() => {history.push(\"/animals/create\")}}>\n                    Add Animal\n                </button>\n\n                <div className=\"animals\">\n                {\n        animals.map(animal => {\n          \n          return <AnimalCard key={animal.id} \n                    animal={animal}\n                    \n                     />\n        })\n      }\n\n                </div>\n    </>\n )\n}","/Users/ronhowie/workspace/kennels/src/components/animal/AnimalProvider.js",[],"/Users/ronhowie/workspace/kennels/src/components/customer/CustomerList.js",["117"],"import React, { useContext, useEffect } from \"react\"\nimport { CustomerContext } from \"./CustomerProvider\"\nimport { CustomerCard } from \"./CustomerCard\"\nimport \"./customer.css\"\n\nexport const CustomerList = () => {\n  // This state changes when `getCustomers()` is invoked below\n  const { customers, getCustomers } = useContext(CustomerContext)\n\n  //useEffect - reach out to the world for something\n  useEffect(() => {\n    console.log(\"CustomerList: useEffect - getCustomers\")\n    getCustomers()\n\n  }, [])\n\n\n  return (\n    <div className=\"customers\">\n      {console.log(\"CustomerList: Render\", customers)}\n      {\n        customers.map(person => {\n          return <CustomerCard key={person.id} customer={person} />\n        })\n      }\n    </div>\n  )\n}","/Users/ronhowie/workspace/kennels/src/components/customer/CustomerProvider.js",[],"/Users/ronhowie/workspace/kennels/src/components/employee/EmployeeProvider.js",[],"/Users/ronhowie/workspace/kennels/src/components/employee/EmployeeList.js",["118","119"],"import React, { useContext, useEffect } from \"react\"\nimport { useHistory } from 'react-router-dom';\nimport { EmployeeContext } from \"./EmployeeProvider\"\nimport { LocationContext } from \"../location/LocationProvider\"\n\nimport { EmployeeCard } from \"./EmployeeCard\"\nimport \"./employee.css\"\n\nexport const EmployeeList = () => {\n  // This state changes when `getEmployees()` is invoked below\n  const { employees, getEmployees } = useContext(EmployeeContext)\n  const { locations, getLocations } = useContext(LocationContext)\n\n  //useEffect - reach out to the world for something\n  useEffect(() => {\n    console.log(\"EmployeeList: useEffect - getEmployees\")\n    getLocations()\n    .then(getEmployees)\n\n  }, [])\n\n\n  const history = useHistory()\n\n  return (\n    <>\n\n      <h2>Employees</h2>\n        <button onClick={() => {history.push(\"/employees/create\")}}>\n          New Employee\n        </button>\n    \n    <div className=\"employees\">\n      {console.log(\"EmployeeList: Render\", employees)}\n      {\n        employees.map(employee => {\n         \n          return <EmployeeCard key={employee.id} employee={employee}  />\n        })\n      }\n    </div>\n    </>\n  )\n}","/Users/ronhowie/workspace/kennels/src/components/location/LocationProvider.js",[],"/Users/ronhowie/workspace/kennels/src/components/location/LocationList.js",["120"],"import React, { useContext, useEffect } from \"react\"\nimport { useHistory } from 'react-router-dom';\nimport { LocationContext } from \"./LocationProvider\"\nimport { LocationCard } from \"./LocationCard\"\nimport \"./location.css\"\n\nexport const LocationList = () => {\n  // This state changes when `getLocations()` is invoked below\n  const { locations, getLocations } = useContext(LocationContext)\n\n  //useEffect - reach out to the world for something\n  useEffect(() => {\n    console.log(\"LocationList: useEffect - getLocations\")\n    getLocations()\n\n  }, [])\n\n  const history = useHistory()\n\n  return (\n    <>\n      <h2>Locations</h2>\n        <button onClick={() => {history.push(\"/locations/create\")}}>\n          New Location\n        </button>\n    <div className=\"locations\">\n      {console.log(\"LocationList: Render\", locations)}\n      {\n        locations.map(place => {\n         \n          return <LocationCard key={place.id} location={place} />\n        })\n      }\n    </div>\n    </>\n  )\n}","/Users/ronhowie/workspace/kennels/src/components/animal/AnimalForm.js",["121"],"import React, { useContext, useEffect, useState } from \"react\"\nimport { LocationContext } from \"../location/LocationProvider\"\nimport { AnimalContext } from \"../animal/AnimalProvider\"\nimport { CustomerContext } from \"../customer/CustomerProvider\"\nimport \"./Animal.css\"\nimport { useHistory } from 'react-router-dom';\n\nexport const AnimalForm = () => {\n    const { addAnimal } = useContext(AnimalContext)\n    const { locations, getLocations } = useContext(LocationContext)\n    const { customers, getCustomers } = useContext(CustomerContext)\n\n      /*\n    With React, we do not target the DOM with `document.querySelector()`. Instead, our return (render) reacts to state or props.\n\n    Define the intial state of the form inputs with useState()\n    */\n\n    const [animal, setAnimal] = useState({\n        name:\"\",\n        breed:\"\",\n        locationId: 0,\n        customerId: 0\n    });\n\n    \n    const history = useHistory();\n    \n    /*\n   Reach out to the world and get customers state\n   and locations state on initialization.\n   */\n\n    useEffect(() => {\n        getCustomers().then(getLocations)\n    }, [])\n\n\n      //when a field changes, update state. The return will re-render and display based on the values in state\n        // NOTE! What's happening in this function can be very difficult to grasp. Read it over many times and ask a lot questions about it.\n    //Controlled component\n    const handleControlledInputChange = (event) => {\n        /* When changing a state object or array,\n        always create a copy, make changes, and then set state.*/\n        const newAnimal = { ...animal }\n        let selectedVal = event.target.value\n        // forms always provide values as strings. But we want to save the ids as numbers. This will cover both customer and location ids\n        if (event.target.id.includes(\"Id\")) {\n          selectedVal = parseInt(selectedVal)\n        }\n        /* Animal is an object with properties.\n        Set the property to the new value\n        using object bracket notation. */\n        newAnimal[event.target.id] = selectedVal\n        // update state\n        setAnimal(newAnimal)\n      }\n\n    const handleClickSaveAnimal = (event) => {\n        event.preventDefault() //Prevents the browser from submitting the form\n\n        const locationId = parseInt(animal.locationId)\n        const customerId = parseInt(animal.customerId)\n\n        if (locationId === 0){\n            window.alert(\"Please selet a location\")\n        } else {\n            animal.locationId = locationId\n            animal.customerId = customerId\n            //invoke addAnimal passing animal as an argument.\n            //once complete, change the url and display the animal list\n            addAnimal(animal)\n            .then(() => history.push(\"/animals\"))\n        }\n            \n    }\n\n    return (\n        <form className=\"animalForm\">\n            <h2 className=\"animalForm__title\">New Animal</h2>\n            <fieldset>\n                <div className=\"form-group\">\n                    <label htmlFor=\"name\">Animal name:</label>\n                    <input type=\"text\" id=\"name\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"Animal name\" value={animal.name}/>\n                </div>\n            </fieldset>\n            <fieldset>\n                <div className=\"form-group\">\n                    <label htmlFor=\"name\">Animal breed:</label>\n                    <input type=\"text\" id=\"breed\" onChange={handleControlledInputChange} required className=\"form-control\" placeholder=\"Animal breed\" value={animal.breed}/>\n                </div>\n            </fieldset>\n            <fieldset>\n                <div className=\"form-group\">\n                    <label htmlFor=\"location\">Assign to location: </label>\n                    <select defaultValue={animal.locationId}  onChange={handleControlledInputChange} name=\"locationId\" id=\"locationId\" className=\"form-control\">\n                        <option value=\"0\">Select a location</option>\n                        {locations.map(l => (\n                            <option key={l.id} value={l.id}>\n                                {l.name}\n                            </option>\n                        ))}\n                    </select>\n                </div>\n            </fieldset>\n            <fieldset>\n                <div className=\"form-group\">\n                    <label htmlFor=\"customerId\">Customer: </label>\n                    <select defaultValue={animal.customerId}  onChange={handleControlledInputChange} name=\"customer\" id=\"customerId\" className=\"form-control\">\n                        <option value=\"0\">Select a cutomer</option>\n                        {customers.map(c => (\n                            <option key={c.id} value={c.id}>\n                                {c.name}\n                            </option>\n                        ))}\n                    </select>\n                </div>\n            </fieldset>\n            <button className=\"btn btn-primary\"\n                onClick={handleClickSaveAnimal}>\n                    Save Animal\n                </button>\n        </form>\n    )\n}\n\n                        \n                    ","/Users/ronhowie/workspace/kennels/src/components/employee/EmployeeForm.js",["122"],"import React, { useContext, useEffect, useState } from \"react\"\nimport { useHistory } from 'react-router-dom';\nimport { LocationContext } from \"../location/LocationProvider\"\nimport { EmployeeContext } from \"./EmployeeProvider\"\nimport \"./employee.css\"\n\nexport const EmployeeForm = () => {\n    const { addEmployee } = useContext(EmployeeContext)\n    \n    const { locations, getLocations } = useContext(LocationContext)\n    \n\n      /*\n    With React, we do not target the DOM with `document.querySelector()`. Instead, our return (render) reacts to state or props.\n\n    Define the intial state of the form inputs with useState()\n    */\n\n    const [employee, setEmployee] = useState({\n        name:\"\",\n        locationId: 0,\n    });\n\n    \n    const history = useHistory();\n    \n    /*\n   Reach out to the world and get customers state\n   and locations state on initialization.\n   */\n\n    useEffect(() => {\n        getLocations()\n    }, [])\n\n\n      //when a field changes, update state. The return will re-render and display based on the values in state\n        // NOTE! What's happening in this function can be very difficult to grasp. Read it over many times and ask a lot questions about it.\n    //Controlled component\n    const handleControlledInputChange = (event) => {\n        /* When changing a state object or array,\n        always create a copy, make changes, and then set state.*/\n        const newEmployee = { ...employee }\n        let selectedVal = event.target.value\n        // forms always provide values as strings. But we want to save the ids as numbers. This will cover both customer and location ids\n        if (event.target.id.includes(\"Id\")) {\n          selectedVal = parseInt(selectedVal)\n        }\n        /* Animal is an object with properties.\n        Set the property to the new value\n        using object bracket notation. */\n        newEmployee[event.target.id] = selectedVal\n        // update state\n        setEmployee(newEmployee)\n      }\n\n    const handleClickSaveEmployee = (event) => {\n        event.preventDefault() //Prevents the browser from submitting the form\n\n        const locationId = parseInt(employee.locationId)\n        \n\n        if (locationId === 0){\n            window.alert(\"Please selet a location\")\n        } else {\n            employee.locationId = locationId\n            \n            //invoke addAnimal passing animal as an argument.\n            //once complete, change the url and display the animal list\n            addEmployee(employee)\n            .then(() => history.push(\"/employees\"))\n        }\n            \n    }\n\n    return (\n        <form className=\"employeeForm\">\n            <h2 className=\"employeeForm__title\">New Employee</h2>\n            <fieldset>\n                <div className=\"form-group\">\n                    <label htmlFor=\"name\">Employee name:</label>\n                    <input type=\"text\" id=\"name\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"Employee name\" value={employee.name}/>\n                </div>\n            </fieldset>\n           \n            <fieldset>\n                <div className=\"form-group\">\n                    <label htmlFor=\"location\">Assign to location: </label>\n                    <select defaultValue={employee.locationId}  onChange={handleControlledInputChange} name=\"locationId\" id=\"locationId\" className=\"form-control\">\n                        <option value=\"0\">Select a location</option>\n                        {locations.map(l => (\n                            <option key={l.id} value={l.id}>\n                                {l.name}\n                            </option>\n                        ))}\n                    </select>\n                </div>\n            </fieldset>\n           \n            <button className=\"btn btn-primary\"\n                onClick={handleClickSaveEmployee}>\n                    Save Employee\n                </button>\n        </form>\n    )\n}\n\n                        \n     ","/Users/ronhowie/workspace/kennels/src/components/location/LocationForm.js",["123","124"],"import React, { useContext, useEffect, useState } from \"react\"\nimport { useHistory } from 'react-router-dom';\nimport { LocationContext } from \"../location/LocationProvider\"\n\nimport \"./location.css\"\n\nexport const LocationForm = () => {\n    const { addLocation } = useContext(LocationContext)\n    const { locations, getLocations } = useContext(LocationContext)\n    \n    \n\n      /*\n    With React, we do not target the DOM with `document.querySelector()`. Instead, our return (render) reacts to state or props.\n\n    Define the intial state of the form inputs with useState()\n    */\n\n    const [location, setLocations] = useState({\n        name:\"\",\n        address:\"\"\n    });\n\n    \n    const history = useHistory();\n    \n    /*\n   Reach out to the world and get customers state\n   and locations state on initialization.\n   */\n\n    useEffect(() => {\n        getLocations()\n    }, [])\n\n\n      //when a field changes, update state. The return will re-render and display based on the values in state\n        // NOTE! What's happening in this function can be very difficult to grasp. Read it over many times and ask a lot questions about it.\n    //Controlled component\n    const handleControlledInputChange = (event) => {\n        /* When changing a state object or array,\n        always create a copy, make changes, and then set state.*/\n        const newLocation = { ...location }\n        let selectedVal = event.target.value\n        // forms always provide values as strings. But we want to save the ids as numbers. This will cover both customer and location ids\n        if (event.target.id.includes(\"Id\")) {\n          selectedVal = parseInt(selectedVal)\n        }\n        /* Animal is an object with properties.\n        Set the property to the new value\n        using object bracket notation. */\n        newLocation[event.target.id] = selectedVal\n        // update state\n        setLocations(newLocation)\n      }\n\n    const handleClickSaveEmployee = (event) => {\n        event.preventDefault() //Prevents the browser from submitting the form\n\n        const locationId = parseInt(location.Id)\n        \n\n        if (locationId === 0){\n            window.alert(\"Please selet a location\")\n        } else {\n            location.Id = locationId\n            \n            //invoke addAnimal passing animal as an argument.\n            //once complete, change the url and display the animal list\n            addLocation(location)\n            .then(() => history.push(\"/locations\"))\n        }\n            \n    }\n\n    return (\n        <form className=\"locationForm\">\n            <h2 className=\"locationForm__title\">New Employee</h2>\n            <fieldset>\n                <div className=\"form-group\">\n                    <label htmlFor=\"name\">Location name:</label>\n                    <input type=\"text\" id=\"name\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"Location name\" value={location.name}/>\n                </div>\n            </fieldset>\n            <fieldset>\n                <div className=\"form-group\">\n                    <label htmlFor=\"address\">Location address:</label>\n                    <input type=\"text\" id=\"address\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"Location address\" value={location.address}/>\n                </div>\n            </fieldset>\n           \n            <button className=\"btn btn-primary\"\n                onClick={handleClickSaveEmployee}>\n                    Save Location\n                </button>\n        </form>\n    )\n}\n\n     ","/Users/ronhowie/workspace/kennels/src/components/animal/AnimalDetail.js",["125","126"],"import React, { useContext, useEffect, useState } from \"react\"\nimport { AnimalContext } from \"./AnimalProvider\"\nimport \"./Animal.css\"\nimport { useParams, useHistory } from \"react-router-dom\"\n\nexport const AnimalDetail = () => {\n  const { getAnimalById } = useContext(AnimalContext)\n\n\tconst [animal, setAnimal] = useState({})\n\n\tconst {animalId} = useParams();\n\tconst history = useHistory();\n\n  useEffect(() => {\n    console.log(\"useEffect\", animalId)\n    getAnimalById(animalId)\n    .then((response) => {\n      setAnimal(response)\n    })\n    }, [])\n\n  return (\n    <section className=\"animal\">\n      <h3 className=\"animal__name\">{animal.name}</h3>\n      <div className=\"animal__breed\">{animal.breed}</div>\n      \n      <div className=\"animal__location\">Location: {animal.location?.name}</div>\n      <div className=\"animal__owner\">Customer: {animal.customer?.name}</div>\n    </section>\n  )\n}","/Users/ronhowie/workspace/kennels/src/components/employee/EmployeeDetail.js",["127","128"],"import React, { useContext, useEffect, useState } from \"react\"\nimport { EmployeeContext } from \"./EmployeeProvider\"\nimport \"./employee.css\"\nimport { useParams, useHistory } from \"react-router-dom\"\n\nexport const EmployeeDetail = () => {\n    const { getEmployeeById } = useContext(EmployeeContext)\n\n    const  [ employee, setEmployee ] = useState({})\n\n    const {employeeId} = useParams()\n    \n    useEffect(() => {\n        getEmployeeById(employeeId)\n        .then((res) => {\n            setEmployee(res)\n        })\n    }, [])\n\n    \n    return (\n        <section className=\"employee\">\n            <h3 className=\"employee__name\">{employee.name}</h3>\n            \n            <div className=\"employee__location\">{employee.location?.name}</div>\n        </section>\n    \n    )\n}\n","/Users/ronhowie/workspace/kennels/src/components/location/LocationDetail.js",["129"],{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":13,"column":11,"nodeType":"136","messageId":"137","endLine":13,"endColumn":20},{"ruleId":"134","severity":1,"message":"138","line":14,"column":11,"nodeType":"136","messageId":"137","endLine":14,"endColumn":20},{"ruleId":"139","severity":1,"message":"140","line":23,"column":6,"nodeType":"141","endLine":23,"endColumn":8,"suggestions":"142"},{"ruleId":"139","severity":1,"message":"143","line":15,"column":6,"nodeType":"141","endLine":15,"endColumn":8,"suggestions":"144"},{"ruleId":"134","severity":1,"message":"135","line":12,"column":11,"nodeType":"136","messageId":"137","endLine":12,"endColumn":20},{"ruleId":"139","severity":1,"message":"145","line":20,"column":6,"nodeType":"141","endLine":20,"endColumn":8,"suggestions":"146"},{"ruleId":"139","severity":1,"message":"147","line":16,"column":6,"nodeType":"141","endLine":16,"endColumn":8,"suggestions":"148"},{"ruleId":"139","severity":1,"message":"149","line":36,"column":8,"nodeType":"141","endLine":36,"endColumn":10,"suggestions":"150"},{"ruleId":"139","severity":1,"message":"147","line":34,"column":8,"nodeType":"141","endLine":34,"endColumn":10,"suggestions":"151"},{"ruleId":"134","severity":1,"message":"135","line":9,"column":13,"nodeType":"136","messageId":"137","endLine":9,"endColumn":22},{"ruleId":"139","severity":1,"message":"147","line":34,"column":8,"nodeType":"141","endLine":34,"endColumn":10,"suggestions":"152"},{"ruleId":"134","severity":1,"message":"153","line":12,"column":8,"nodeType":"136","messageId":"137","endLine":12,"endColumn":15},{"ruleId":"139","severity":1,"message":"154","line":20,"column":8,"nodeType":"141","endLine":20,"endColumn":10,"suggestions":"155"},{"ruleId":"134","severity":1,"message":"156","line":4,"column":21,"nodeType":"136","messageId":"137","endLine":4,"endColumn":31},{"ruleId":"139","severity":1,"message":"157","line":18,"column":8,"nodeType":"141","endLine":18,"endColumn":10,"suggestions":"158"},{"ruleId":"139","severity":1,"message":"159","line":18,"column":8,"nodeType":"141","endLine":18,"endColumn":10,"suggestions":"160"},"no-native-reassign",["161"],"no-negated-in-lhs",["162"],"no-unused-vars","'locations' is assigned a value but never used.","Identifier","unusedVar","'customers' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getAnimals', 'getCustomers', and 'getLocations'. Either include them or remove the dependency array.","ArrayExpression",["163"],"React Hook useEffect has a missing dependency: 'getCustomers'. Either include it or remove the dependency array.",["164"],"React Hook useEffect has missing dependencies: 'getEmployees' and 'getLocations'. Either include them or remove the dependency array.",["165"],"React Hook useEffect has a missing dependency: 'getLocations'. Either include it or remove the dependency array.",["166"],"React Hook useEffect has missing dependencies: 'getCustomers' and 'getLocations'. Either include them or remove the dependency array.",["167"],["168"],["169"],"'history' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'animalId' and 'getAnimalById'. Either include them or remove the dependency array.",["170"],"'useHistory' is defined but never used.","React Hook useEffect has missing dependencies: 'employeeId' and 'getEmployeeById'. Either include them or remove the dependency array.",["171"],"React Hook useEffect has missing dependencies: 'getLocationById' and 'locationId'. Either include them or remove the dependency array.",["172"],"no-global-assign","no-unsafe-negation",{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},{"desc":"181","fix":"182"},{"desc":"179","fix":"183"},{"desc":"179","fix":"184"},{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},"Update the dependencies array to be: [getAnimals, getCustomers, getLocations]",{"range":"191","text":"192"},"Update the dependencies array to be: [getCustomers]",{"range":"193","text":"194"},"Update the dependencies array to be: [getEmployees, getLocations]",{"range":"195","text":"196"},"Update the dependencies array to be: [getLocations]",{"range":"197","text":"198"},"Update the dependencies array to be: [getCustomers, getLocations]",{"range":"199","text":"200"},{"range":"201","text":"198"},{"range":"202","text":"198"},"Update the dependencies array to be: [animalId, getAnimalById]",{"range":"203","text":"204"},"Update the dependencies array to be: [employeeId, getEmployeeById]",{"range":"205","text":"206"},"Update the dependencies array to be: [getLocationById, locationId]",{"range":"207","text":"208"},[826,828],"[getAnimals, getCustomers, getLocations]",[499,501],"[getCustomers]",[700,702],"[getEmployees, getLocations]",[546,548],"[getLocations]",[1102,1104],"[getCustomers, getLocations]",[930,932],[875,877],[544,546],"[animalId, getAnimalById]",[522,524],"[employeeId, getEmployeeById]",[522,524],"[getLocationById, locationId]"]